#!/usr/bin/env python3

import sys
from pitelemetry import TelemetryFactory, PiTemperature
from time import sleep
import logging
import yaml
import os
import threading
import signal
import keyboard, termios, tty

sensorTypes = {'temperature': 'PiTemperature', 'humidity': 'PiHumidity'}

def sigcatch(signum, frame):
    """Signal Handler """

    if signum == signal.SIGTERM:
        log.debug("SIGTERM received, shutting down")
        shutdown.set()


def getchar():
    """ Utility function to read a character from the keyboard """

    ch = ' '
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


def main(argv):
    """Create and run a thread for each sensor being monitored """

    if not argv or len(argv) != 1:
        with open('/etc/pitelemetry.yaml', 'r') as configFile:
            try:
                config = yaml.safe_load(configFile)
            except yaml.YAMLError as exc:
                print(exc)
    else:
        with open(argv[0], 'r') as configFile:
            try:
                config = yaml.safe_load(configFile)
            except yaml.YAMLError as exc:
                print(exc)

        # Initialise logging
        logging.basicConfig(level = {'info':logging.INFO, 'debug':logging.DEBUG}[config['log_level']])
        log = logging.getLogger("pitelemetry")
        log.setLevel({'info':logging.INFO, 'debug':logging.DEBUG}[config['log_level']])
        log.info("pitelemetry started")
        log.debug("config = %s", config)

        # Make sure we have the right modules installed
        os.system('modprobe w1-gpio')
        os.system('modprobe w1-therm')

        # Set an event for shutdown
        shutdown = threading.Event()
        shutdown.clear()

        signal.signal(signal.SIGTERM, sigcatch)

        # Parse the config and instantiate a thread for each sensor
        broker = config['broker']
        log.debug("broker = %s", broker)
        sensors = config['sensors']
        log.debug("sensors = %s", sensors)
        threads = {}
        telemetryObj = TelemetryFactory()

        i =0
        for sensor in sensors:
            log.debug("sensor before test = %s", sensor)
            if not (sensor['sensor'] is None):
                sensor = sensor['sensor']
            log.debug("sensor after test = %s", sensor)
            log.debug("name = %s, type = %s, device = %s, topic = %s", sensor['name'], sensor['type'], sensor['device'], sensor['topic'])

            sensorType = sensorTypes[sensor['type']]
            log.debug("sensorType = %s", sensorType)
            threads[i] = telemetryObj.create(sensorType, broker, sensor, shutdown)
            threads[i].setName(sensor['name'])
            threads[i].setDaemon(True)
            threads[i].start()
            log.debug("Thread %s created and started",sensor['name'])
            i += 1

        while not shutdown.isSet():
            if sys.stdin.isatty():
                char = getchar()
                if char == "q":
                    log.debug("shut down signalled from keyboard")
                    shutdown.set()

            sleep(1)

        # Shutdown
        log.debug("Shutting down")
        for j in range(0,i-1):
            threads[j].join()
        log.info("Shutdown")

if __name__ == "__main__":
    main(sys.argv[1:])
